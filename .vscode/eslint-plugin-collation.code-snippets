{
    // Place your eslint-plugin-collation workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "New Rule": {
        "prefix": "new-rule",
        "body": [
            "import { AST_NODE_TYPES, TSESTree } from \"@typescript-eslint/utils\";",
            "import {",
            "    RuleContext,",
            "    RuleFix,",
            "    RuleFixer,",
            "    SourceCode,",
            "} from \"@typescript-eslint/utils/dist/ts-eslint\";",
            "import { RuleName } from \"../enums/rule-name\";",
            "import { createRule } from \"../utils/rule-utils\";",
            "",
            "const ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/} = createRule({",
            "    create: (context) => {",
            "        return {};",
            "    },",
            "    defaultOptions: [],",
            "    meta: {",
            "        docs: {",
            "            description: \"${1:description}\",",
            "            recommended: \"warn\",",
            "        },",
            "        fixable: \"code\",",
            "        messages: {",
            "            ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}: \"${2:errorMessage}\",",
            "        },",
            "        schema: [],",
            "        type: \"suggestion\",",
            "    },",
            "    name: RuleName.${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/},",
            "});",
            "",
            "export { ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/} };",
            ""
        ],
        "description": "New Rule"
    },
    "New Rule Tests": {
        "prefix": "new-tests",
        "body": [
            "import { ESLintUtils } from \"@typescript-eslint/utils\";",
            "import { ${TM_FILENAME_BASE/(.*)\\..+$/${1:/camelcase}/} } from \"./${TM_FILENAME_BASE/(.*)\\..+$/$1/}\";",
            "import { stripIndent } from \"common-tags\";",
            "",
            "const ruleTester = new ESLintUtils.RuleTester({",
            "    parser: \"@typescript-eslint/parser\",",
            "});",
            "",
            "ruleTester.run(\"${TM_FILENAME_BASE/(.*)\\..+$/${1:/camelcase}/}\", ${TM_FILENAME_BASE/(.*)\\..+$/${1:/camelcase}/}, {",
            "    valid: [",
            "        {",
            "            name: \"should not report errors\",",
            "            code: stripIndent``,",
            "        },",
            "    ],",
            "    invalid: [",
            "        {",
            "            name: \"should fix errors\",",
            "            code: stripIndent``,",
            "            output: stripIndent``,",
            "            errors: [{ messageId: \"${TM_FILENAME_BASE/(.*)\\..+$/${1:/camelcase}/}\" }],",
            "        },",
            "    ],",
            "});",
            ""
        ],
        "description": "New Rule Tests"
    }
}

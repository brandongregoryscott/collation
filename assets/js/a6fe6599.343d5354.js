"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[493],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=o,f=c["".concat(p,".").concat(d)]||c[d]||u[d]||i;return n?r.createElement(f,a(a({ref:t},m),{},{components:n})):r.createElement(f,a({ref:t},m))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8717:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return m},default:function(){return c}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],l={},p="Prefer Import",s={unversionedId:"rules/prefer-import",id:"rules/prefer-import",title:"Prefer Import",description:"Name",source:"@site/docs/rules/prefer-import.md",sourceDirName:"rules",slug:"/rules/prefer-import",permalink:"/docs/rules/prefer-import",editUrl:"https://github.com/brandongregoryscott/eslint-plugin-collation/tree/main/documentation/docs/rules/prefer-import.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"No Inline Export",permalink:"/docs/rules/no-inline-export"},next:{title:"Sort Dependency List",permalink:"/docs/rules/sort-dependency-list"}},m=[{value:"Name",id:"name",children:[],level:2},{value:"Description",id:"description",children:[],level:2},{value:"Example",id:"example",children:[],level:2},{value:"Options",id:"options",children:[],level:2},{value:"Notes",id:"notes",children:[{value:"Formatting",id:"formatting",children:[],level:3},{value:"Module Resolution",id:"module-resolution",children:[],level:3},{value:"Multiple Import Declarations",id:"multiple-import-declarations",children:[],level:3},{value:"Twilio Paste",id:"twilio-paste",children:[],level:3}],level:2}],u={toc:m};function c(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"prefer-import"},"Prefer Import"),(0,i.kt)("h2",{id:"name"},"Name"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"prefer-import")),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Enforces imports from a preferred module over another, such as for tree-shaking purposes or wrapping a library. Similar to ",(0,i.kt)("a",{parentName:"p",href:"https://eslint.org/docs/latest/rules/no-restricted-imports"},(0,i.kt)("inlineCode",{parentName:"a"},"no-restricted-imports")),", but with auto-fix ability."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Given the following ESLint config:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "collation/prefer-import": [\n        "error",\n        {\n            "lodash": {\n                "importName": "*",\n                "replacementModuleSpecifier": "lodash/{importName}",\n                "replaceAsDefault": true\n            }\n        }\n    ]\n}\n')),(0,i.kt)("p",null,"This import:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { isEmpty, isNil } from "lodash";\n')),(0,i.kt)("p",null,"will be transformed to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import isEmpty from "lodash/isEmpty";\nimport isNil from "lodash/isNil";\n')),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," object has the following structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface PreferImportOptions {\n    [moduleSpecifier: string]: ImportRule | ImportRule[];\n}\n\ninterface ImportRule {\n    /**\n     * Import name or list of names to match and replace with preferred module imports. Can also be a wildcard ('*') to match any import from the `moduleSpecifier`, or a glob pattern ('Modal*'), using `minimatch` for pattern matching.\n     */\n    importName: string[] | string;\n\n    /**\n     * Import props from a module of the same canonical name, i.e. `import { AlertProps } from '@twilio-paste/core/alert';` instead of from `'@twilio-paste/core/alert-props'`\n     * @default true\n     */\n    importPropsFromSameModule?: boolean;\n\n    /**\n     * Use a default import for replacement instead of a named import.\n     * @default false\n     */\n    replaceAsDefault?: boolean;\n\n    /**\n     * Destination module to replace imports with. A reference to the matched import name can be used with the variable `{importName}`, e.g. 'lodash/{importName}'\n     */\n    replacementModuleSpecifier: string;\n\n    /**\n     * String transformation method to be run on the matched `importName`. Only applicable if `replacementModuleSpecifier` has the replacement variable `{importName}`.\n     */\n    transformImportName?:\n        | \"camel-case\"\n        | \"kebab-case\"\n        | \"lower-case\"\n        | \"upper-case\";\n}\n")),(0,i.kt)("p",null,"When the value of a ",(0,i.kt)("inlineCode",{parentName:"p"},"moduleSpecifier")," is an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportRule"),"s (rather than a single object), they should be ordered from most specific to least specific. It's possible that an import name matches multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportRule")," entries, and only the first match is used for replacement."),(0,i.kt)("h2",{id:"notes"},"Notes"),(0,i.kt)("h3",{id:"formatting"},"Formatting"),(0,i.kt)("p",null,"The fix for this rule does not handle any whitespace/formatting, and may add additional new lines (or lack new lines where may be appropriate). It's assumed you are using a more general formatting tool like ",(0,i.kt)("inlineCode",{parentName:"p"},"Prettier")," to fix this. It shouldn't produce ",(0,i.kt)("em",{parentName:"p"},"broken")," code, so if the output code can't be parsed by TypeScript, please ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/brandongregoryscott/eslint-plugin-collation/issues/new/choose"},"open up an issue"),"!"),(0,i.kt)("h3",{id:"module-resolution"},"Module Resolution"),(0,i.kt)("p",null,"This rule does not perform any module resolution to determine if the ",(0,i.kt)("inlineCode",{parentName:"p"},"replacementModuleSpecifier")," actually exists or not. It's up to you to ensure your configuration results in valid import paths."),(0,i.kt)("h3",{id:"multiple-import-declarations"},"Multiple Import Declarations"),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"importPropsFromSameModule")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," (which is the default behavior), this rule may produce multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportDeclaration")," statements for the same ",(0,i.kt)("inlineCode",{parentName:"p"},"replacementModuleSpecifier"),". Usually, imports from the same module should be consolidated into one statement (unless they are separated due to being value/type imports). The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-duplicates.md"},(0,i.kt)("inlineCode",{parentName:"a"},"imports/no-duplicates"))," rule can be used to auto-fix these duplicate import statements if desired."),(0,i.kt)("h3",{id:"twilio-paste"},"Twilio Paste"),(0,i.kt)("p",null,"In addition to reducing bundle size when using ",(0,i.kt)("inlineCode",{parentName:"p"},"lodash")," functions, one of the main motivators around creating this rule was the ",(0,i.kt)("a",{parentName:"p",href:"https://paste.twilio.design/core"},"guidance by the Twilio Paste team on best practices")," for importing from ",(0,i.kt)("inlineCode",{parentName:"p"},"@twilio-paste/core"),". While the ",(0,i.kt)("a",{parentName:"p",href:"https://eslint.org/docs/latest/rules/no-restricted-imports"},(0,i.kt)("inlineCode",{parentName:"a"},"no-restricted-imports"))," can be configured to nudge people against using ",(0,i.kt)("inlineCode",{parentName:"p"},"@twilio-paste/core"),", it still requires you to update the import manually, and at the time of writing, VS Code doesn't know how to suggest imports from the individual packages such as ",(0,i.kt)("inlineCode",{parentName:"p"},"@twilio-paste/core/box"),"."),(0,i.kt)("p",null,"As such, I've written an extensive (but likely non-exhaustive) configuration list oriented around improving the DX while using ",(0,i.kt)("a",{parentName:"p",href:"https://paste.twilio.design/"},"Twilio Paste"),". It should serve as a good baseline config for consuming applications. You can also view the tests that run against this config to verify expected output ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/brandongregoryscott/eslint-plugin-collation/blob/3f6721ebf16f688cfcf289d75936e9eff525ccec/src/rules/prefer-import.test.ts#L291-L1306"},"here"),"."),(0,i.kt)("p",null,"As of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/brandongregoryscott/eslint-plugin-collation/releases/tag/v1.3.0"},"v1.3.0"),", this config is bundled in the package and can be used by extending ",(0,i.kt)("inlineCode",{parentName:"p"},"collation/prefer-import.@twilio-paste"),", i.e."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "extends": ["plugin:collation/prefer-import.@twilio-paste"]\n}\n')),(0,i.kt)("hr",null),(0,i.kt)("p",null,"If you encounter an import that's being fixed with a non-existent package, feel free to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/brandongregoryscott/eslint-plugin-collation/issues/new/choose"},"open up an issue"),"!"))}c.isMDXComponent=!0}}]);
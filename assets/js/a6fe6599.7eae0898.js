"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[493],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),m=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=m(e.components);return i.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=m(n),d=r,f=u["".concat(p,".").concat(d)]||u[d]||s[d]||o;return n?i.createElement(f,a(a({ref:t},c),{},{components:n})):i.createElement(f,a({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var m=2;m<o;m++)a[m]=n[m];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8717:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return m},toc:function(){return c},default:function(){return u}});var i=n(7462),r=n(3366),o=(n(7294),n(3905)),a=["components"],l={},p="Prefer Import",m={unversionedId:"rules/prefer-import",id:"rules/prefer-import",title:"Prefer Import",description:"Name",source:"@site/docs/rules/prefer-import.md",sourceDirName:"rules",slug:"/rules/prefer-import",permalink:"/docs/rules/prefer-import",editUrl:"https://github.com/brandongregoryscott/eslint-plugin-collation/tree/main/documentation/docs/rules/prefer-import.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"No Inline Export",permalink:"/docs/rules/no-inline-export"},next:{title:"Sort Dependency List",permalink:"/docs/rules/sort-dependency-list"}},c=[{value:"Name",id:"name",children:[],level:2},{value:"Description",id:"description",children:[],level:2},{value:"Example",id:"example",children:[],level:2},{value:"Options",id:"options",children:[],level:2},{value:"Notes",id:"notes",children:[{value:"Formatting",id:"formatting",children:[],level:3},{value:"Module Resolution",id:"module-resolution",children:[],level:3},{value:"Multiple Import Declarations",id:"multiple-import-declarations",children:[],level:3},{value:"Twilio Paste",id:"twilio-paste",children:[],level:3}],level:2}],s={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"prefer-import"},"Prefer Import"),(0,o.kt)("h2",{id:"name"},"Name"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"prefer-import")),(0,o.kt)("h2",{id:"description"},"Description"),(0,o.kt)("p",null,"Enforces imports from a preferred module over another, such as for tree-shaking purposes or wrapping a library. Similar to ",(0,o.kt)("a",{parentName:"p",href:"https://eslint.org/docs/latest/rules/no-restricted-imports"},(0,o.kt)("inlineCode",{parentName:"a"},"no-restricted-imports")),", but with auto-fix ability."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Given the following ESLint config:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "collation/prefer-import": [\n        "error",\n        {\n            "lodash": {\n                "importName": "*",\n                "replacementModuleSpecifier": "lodash/{importName}",\n                "replaceAsDefault": true\n            }\n        }\n    ]\n}\n')),(0,o.kt)("p",null,"This import:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { isEmpty, isNil } from "lodash";\n')),(0,o.kt)("p",null,"will be transformed to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import isEmpty from "lodash/isEmpty";\nimport isNil from "lodash/isNil";\n')),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"options")," object has the following structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface PreferImportOptions {\n    [moduleSpecifier: string]: ImportRule | ImportRule[];\n}\n\ninterface ImportRule {\n    /**\n     * Import name or list of names to match and replace with preferred module imports. Can also be a wildcard ('*') to match any import from the `moduleSpecifier`, or a glob pattern ('Modal*'), using `minimatch` for pattern matching.\n     */\n    importName: string[] | string;\n\n    /**\n     * Import props from a module of the same canonical name, i.e. `import { AlertProps } from '@twilio-paste/core/alert';` instead of from `'@twilio-paste/core/alert-props'`\n     * @default true\n     */\n    importPropsFromSameModule?: boolean;\n\n    /**\n     * Use a default import for replacement instead of a named import.\n     * @default false\n     */\n    replaceAsDefault?: boolean;\n\n    /**\n     * Destination module to replace imports with. A reference to the matched import name can be used with the variable `{importName}`, e.g. 'lodash/{importName}'\n     */\n    replacementModuleSpecifier: string;\n\n    /**\n     * String transformation method to be run on the matched `importName`. Only applicable if `replacementModuleSpecifier` has the replacement variable `{importName}`.\n     */\n    transformImportName?:\n        | \"camel-case\"\n        | \"kebab-case\"\n        | \"lower-case\"\n        | \"upper-case\";\n}\n")),(0,o.kt)("p",null,"When the value of a ",(0,o.kt)("inlineCode",{parentName:"p"},"moduleSpecifier")," is an array of ",(0,o.kt)("inlineCode",{parentName:"p"},"ImportRule"),"s (rather than a single object), they should be ordered from most specific to least specific. It's possible that an import name matches multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"ImportRule")," entries, and only the first match is used for replacement."),(0,o.kt)("h2",{id:"notes"},"Notes"),(0,o.kt)("h3",{id:"formatting"},"Formatting"),(0,o.kt)("p",null,"The fix for this rule does not handle any whitespace/formatting, and may add additional new lines (or lack new lines where may be appropriate). It's assumed you are using a more general formatting tool like ",(0,o.kt)("inlineCode",{parentName:"p"},"Prettier")," to fix this. It shouldn't produce ",(0,o.kt)("em",{parentName:"p"},"broken")," code, so if the output code can't be parsed by TypeScript, please ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/brandongregoryscott/eslint-plugin-collation/issues/new/choose"},"open up an issue"),"!"),(0,o.kt)("h3",{id:"module-resolution"},"Module Resolution"),(0,o.kt)("p",null,"This rule does not perform any module resolution to determine if the ",(0,o.kt)("inlineCode",{parentName:"p"},"replacementModuleSpecifier")," actually exists or not. It's up to you to ensure your configuration results in valid import paths."),(0,o.kt)("h3",{id:"multiple-import-declarations"},"Multiple Import Declarations"),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"importPropsFromSameModule")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," (which is the default behavior), this rule may produce multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"ImportDeclaration")," statements for the same ",(0,o.kt)("inlineCode",{parentName:"p"},"replacementModuleSpecifier"),". Usually, imports from the same module should be consolidated into one statement (unless they are separated due to being value/type imports). The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-duplicates.md"},(0,o.kt)("inlineCode",{parentName:"a"},"imports/no-duplicates"))," rule can be used to auto-fix these duplicate import statements if desired."),(0,o.kt)("h3",{id:"twilio-paste"},"Twilio Paste"),(0,o.kt)("p",null,"In addition to reducing bundle size when using ",(0,o.kt)("inlineCode",{parentName:"p"},"lodash")," functions, one of the main motivators around creating this rule was the ",(0,o.kt)("a",{parentName:"p",href:"https://paste.twilio.design/core"},"guidance by the Twilio Paste team on best practices")," for importing from ",(0,o.kt)("inlineCode",{parentName:"p"},"@twilio-paste/core"),". While the ",(0,o.kt)("a",{parentName:"p",href:"https://eslint.org/docs/latest/rules/no-restricted-imports"},(0,o.kt)("inlineCode",{parentName:"a"},"no-restricted-imports"))," can be configured to nudge people against using ",(0,o.kt)("inlineCode",{parentName:"p"},"@twilio-paste/core"),", it still requires you to update the import manually, and at the time of writing, VS Code doesn't know how to suggest imports from the individual packages such as ",(0,o.kt)("inlineCode",{parentName:"p"},"@twilio-paste/core/box"),"."),(0,o.kt)("p",null,"As such, I've written an extensive (but likely non-exhaustive) configuration list oriented around improving the DX while using ",(0,o.kt)("a",{parentName:"p",href:"https://paste.twilio.design/"},"Twilio Paste"),". It isn't bundled or exported, but should serve as a good baseline config for consuming applications. You can also view the tests that run against this config to verify expected output ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/brandongregoryscott/eslint-plugin-collation/blob/3f6721ebf16f688cfcf289d75936e9eff525ccec/src/rules/prefer-import.test.ts#L291-L1306"},"here"),"."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Click to view Twilio Paste config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "collation/prefer-import": [\n        "error",\n        {\n            "@twilio-paste/core": [\n                {\n                    "importName": "AlertDialog*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/alert-dialog"\n                },\n                {\n                    "importName": "Alert*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/alert"\n                },\n                {\n                    "importName": [\n                        "Anchor*",\n                        "isExternalUrl",\n                        "secureExternalLink"\n                    ],\n                    "replacementModuleSpecifier": "@twilio-paste/core/anchor"\n                },\n                {\n                    "importName": [\n                        "BOX_PROPS_TO_BLOCK",\n                        "Box*",\n                        "StyledBox",\n                        "getCustomElementStyles",\n                        "safelySpreadBoxProps"\n                    ],\n                    "replacementModuleSpecifier": "@twilio-paste/core/box"\n                },\n                {\n                    "importName": "Breadcrumb*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/breadcrumb"\n                },\n                {\n                    "importName": "ButtonGroup*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/button-group"\n                },\n                {\n                    "importName": [\n                        "Button*",\n                        "DestructiveSecondaryButtonToggleStyles"\n                    ],\n                    "replacementModuleSpecifier": "@twilio-paste/core/button"\n                },\n                {\n                    "importName": "Callout*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/callout"\n                },\n                {\n                    "importName": "ChatComposer*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/chat-composer"\n                },\n                {\n                    "importName": ["*Chat*", "ComposerAttachmentCard"],\n                    "replacementModuleSpecifier": "@twilio-paste/core/chat-log"\n                },\n                {\n                    "importName": "Checkbox*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/checkbox"\n                },\n                {\n                    "importName": "CodeBlock*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/code-block"\n                },\n                {\n                    "importName": [\n                        "*ComboboxPrimitive*",\n                        "useMultiSelectPrimitive"\n                    ],\n                    "replacementModuleSpecifier": "@twilio-paste/core/combobox-primitive"\n                },\n                {\n                    "importName": "*Combobox*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/combobox"\n                },\n                {\n                    "importName": "DataGrid*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/data-grid"\n                },\n                {\n                    "importName": ["DatePicker*", "formatReturnDate"],\n                    "replacementModuleSpecifier": "@twilio-paste/core/date-picker"\n                },\n                {\n                    "importName": "*DescriptionList*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/description-list"\n                },\n                {\n                    "importName": [\n                        "DisclosurePrimitive*",\n                        "useDisclosurePrimitiveState"\n                    ],\n                    "replacementModuleSpecifier": "@twilio-paste/core/disclosure-primitive"\n                },\n                {\n                    "importName": [\n                        "Disclosure*",\n                        "AnimatedDisclosureContent",\n                        "useDisclosureState"\n                    ],\n                    "replacementModuleSpecifier": "@twilio-paste/core/disclosure"\n                },\n                {\n                    "importName": "DisplayPill*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/display-pill-group"\n                },\n                {\n                    "importName": "FilePicker*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/file-picker"\n                },\n                {\n                    "importName": "FileUploader*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/file-uploader"\n                },\n                {\n                    "importName": "*FormPill*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/form-pill-group"\n                },\n                {\n                    "importName": "Form*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/form"\n                },\n                {\n                    "importName": ["Grid*", "Column*"],\n                    "replacementModuleSpecifier": "@twilio-paste/core/grid"\n                },\n                {\n                    "importName": "Heading*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/heading"\n                },\n                {\n                    "importName": "HelpText*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/help-text"\n                },\n                {\n                    "importName": "InPageNavigation*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/in-page-navigation"\n                },\n                {\n                    "importName": [\n                        "InputBox*",\n                        "InputChevronWrapper",\n                        "Prefix*",\n                        "Suffix*",\n                        "getInputChevronIconColor"\n                    ],\n                    "replacementModuleSpecifier": "@twilio-paste/core/input-box"\n                },\n                {\n                    "importName": "Input*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/input"\n                },\n                {\n                    "importName": ["Label*", "RequiredDot*"],\n                    "replacementModuleSpecifier": "@twilio-paste/core/label"\n                },\n                {\n                    "importName": "*ListboxPrimitive*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/listbox-primitive"\n                },\n                {\n                    "importName": ["List*", "OrderedList", "UnorderedList"],\n                    "replacementModuleSpecifier": "@twilio-paste/core/list"\n                },\n                {\n                    "importName": "Media*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/media-object"\n                },\n                {\n                    "importName": "*MenuPrimitive*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/menu-primitive"\n                },\n                {\n                    "importName": "*Menu*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/menu"\n                },\n                {\n                    "importName": "*MinimizableDialog*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/minimizable-dialog"\n                },\n                {\n                    "importName": "*NonModalDialog*Primitive*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/non-modal-dialog-primitive"\n                },\n                {\n                    "importName": ["SideModal*", "useSideModalState"],\n                    "replacementModuleSpecifier": "@twilio-paste/core/side-modal"\n                },\n                {\n                    "importName": ["*Modal*", "modal*Styles"],\n                    "replacementModuleSpecifier": "@twilio-paste/core/modal"\n                },\n                {\n                    "importName": "Pagination*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/pagination"\n                },\n                {\n                    "importName": ["Popover*", "usePopoverState"],\n                    "replacementModuleSpecifier": "@twilio-paste/core/popover"\n                },\n                {\n                    "importName": "RadioButton*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/radio-button-group"\n                },\n                {\n                    "importName": "Radio*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/radio-group"\n                },\n                {\n                    "importName": ["Select*", "Option*"],\n                    "replacementModuleSpecifier": "@twilio-paste/core/select"\n                },\n                {\n                    "importName": "Sidebar*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/sidebar"\n                },\n                {\n                    "importName": [\n                        "Stack*",\n                        "getStackChildMargins",\n                        "getStackDisplay",\n                        "getStackStyles"\n                    ],\n                    "replacementModuleSpecifier": "@twilio-paste/core/stack"\n                },\n                {\n                    "importName": "Switch*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/switch"\n                },\n                {\n                    "importName": [\n                        "Table*",\n                        "TBody*",\n                        "TFoot*",\n                        "THead*",\n                        "Td*",\n                        "Th",\n                        "ThProp*",\n                        "Tr",\n                        "TrProp*"\n                    ],\n                    "replacementModuleSpecifier": "@twilio-paste/core/table"\n                },\n                {\n                    "importName": ["Tab*", "useTabState"],\n                    "replacementModuleSpecifier": "@twilio-paste/core/tabs"\n                },\n                {\n                    "importName": [\n                        "Text*",\n                        "StyledText",\n                        "TEXT_PROPS_TO_BLOCK",\n                        "safelySpreadTextProps"\n                    ],\n                    "replacementModuleSpecifier": "@twilio-paste/core/text"\n                },\n                {\n                    "importName": ["TimePicker*", "formatReturnTime"],\n                    "replacementModuleSpecifier": "@twilio-paste/core/time-picker"\n                },\n                {\n                    "importName": ["Toast*", "AnimatedToast", "useToaster"],\n                    "replacementModuleSpecifier": "@twilio-paste/core/toast"\n                },\n                {\n                    "importName": [\n                        "TooltipPrimitive*",\n                        "useTooltipPrimitiveState"\n                    ],\n                    "replacementModuleSpecifier": "@twilio-paste/core/tooltip-primitive"\n                },\n                {\n                    "importName": ["Tooltip*", "useTooltipState"],\n                    "replacementModuleSpecifier": "@twilio-paste/core/tooltip"\n                },\n                {\n                    "importName": "*",\n                    "replacementModuleSpecifier": "@twilio-paste/core/{importName}",\n                    "transformImportName": "kebab-case"\n                }\n            ]\n        }\n    ]\n}\n'))),(0,o.kt)("hr",null),(0,o.kt)("p",null,"If you encounter an import that's being fixed with a non-existent package, feel free to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/brandongregoryscott/eslint-plugin-collation/issues/new/choose"},"open up an issue"),"!"))}u.isMDXComponent=!0}}]);